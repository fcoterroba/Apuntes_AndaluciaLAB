clear
a = iris
a = iris
View(a)
a = iris
View(a)
Summary(a)
clear
iris
a = iris
a = 3
iris
a = iris
a = 3
summary(iris)
iris
a = iris
a = 3
summary(iris)
iris[1,]
iris[1,]
iris[2,]
iris[4,]
iris[4,3]
iris[2,3]
iris
iris[1,]
iris[,1]
iris[iris$Petal.Length > 6,]
iris[iris$Petal.Length > 6,3,]
iris[iris$Petal.Length > 6.3,]
iris[iris$Petal.Length > 6.3,4]
iris[iris$Petal.Length > 6.3,5]
rm(a)
ls
ls()
dir()
getwd()
getwd()
c(1,2,3,4,5)
1:5
1:20
array = 1:20
array.tostring()
array = 1:-30
as.character(array)
as.character(array[4])
array = as.character(array[4])
array = as.character(1:20[4])
array = as.character(c(1:20)[4])
array = 1:20
array = as.character([4,])
array = as.character(4,)
array = as.character(4)
a = iris
summary (a)
View(a)
read.csv("https://www.ree.es/sites/default/files/01_ACTIVIDADES/Documentos/IRE/Brutos_Mar2020.csv", sep";")
read.csv("https://www.ree.es/sites/default/files/01_ACTIVIDADES/Documentos/IRE/Brutos_Mar2020.csv", sep=";")
tail(elect)
elect = read.csv("https://www.ree.es/sites/default/files/01_ACTIVIDADES/Documentos/IRE/Brutos_Mar2020.csv", sep=";", skip=3, nrow=135, dec=",")
tail(elect)
tail(elect)
summary(elect)
colnames(elect)[1] = "MES"
elect
plot(iris$Petal.length, iris$Petal.Width)
plot(iris$Petal.Length, iris$Petal.Width)
plot(iris$Petal.Length, iris$Petal.Width, col=iris$Species)
plot(iris$Petal.Length, iris$Petal.Width, col=c("Pink", "Blue", "Yellow")[iris$Species])
plot(iris, col=iris$Species)
plot(elect$SER_TUR)
plot(elect$SER_TUR, type="l")
plot(elect$SER_TUR, type="b")
plot(elect$SER_TUR, type="b")
plot(elect$SER_TUR, type="o")
plot(elect$SER_TUR, type="l")
plot(elect$SER_TUR, type="o")
plot(elect$SER_TUR, type="s")
plot(elect$SER_TUR, type="lty")
plot(elect$SER_TUR, type="lty")
plot(elect$SER_TUR, type="lty")
=
plot(elect$SER_TUR, type="lty=2")
plot(elect$SER_TUR, type="l" lty=2")
plot(elect$SER_TUR, type="l", lty=2")
exit
)
plot(iris, col=iris$Species)
plot(iris, col=iris$Species)
plot(elect$SER_TUR, type="l", lty=2")
plot(iris, col=iris$Species)
plot(elect$SER_TUR, type="l")
plot(elect$SER_TUR, type="l", lty=2")
plot(iris, col=iris$Species)
plot(elect$SER_TUR, type="l", lty=2")
plot(iris, col=iris$Species)
plot(elect$SER_TUR, type="l", lty=2")
plot(iris, col=iris$Species)
plot(elect$SER_TUR, type="l", lty=2")
plot(iris, col=iris$Species)
plot(elect$SER_TUR, type="l", lty=2)
plot(iris, col=iris$Species)
plot(elect$SER_TUR, type="l", lty=2, col="red")
plot(iris, col=iris$Species)
plot(elect$SER_TUR, type="l", lty=2, col="red")
lines(elect$SER_TUR.2, type="l", lty=2)
elecTUR = ts(elect$SER_TUR, nstart=c(2009, 1), frequency = 12)
elecTUR = ts(elect$SER_TUR, start=c(2009, 1), frequency = 12)
elecTUR
plot(elecTUR)
plot(elecTUR)
lines(elecTUR1)
lines(elecTUR2)
plot(elecTUR)
lines(elecTUR1, lty=2, col="red")
lines(elecTUR2, lty=4, col="green")
elecTUR = ts(elect$SER_TUR, start=c(2009, 1), frequency = 12)
elecTUR1 = ts(elect$SER_TUR.1, start=c(2009, 1), frequency = 12)
elecTUR2 = ts(elect$SER_TUR.2, start=c(2009, 1), frequency = 12)
elecTUR
plot(elecTUR)
lines(elecTUR1, lty=2, col="red")
lines(elecTUR2, lty=4, col="green")
plot(elecTUR)
lines(elecTUR1, lty=2, col="red")
lines(elecTUR2, lty=4, col="blue")
plot(elecTUR)
lines(elecTUR1, col="red")
lines(elecTUR2, col="blue")
decElect = decompose(electTUR)
decElect
decElect = decompose(electTUR)
decElect
decElect = decompose(electTUR)
decElect
decElect = decompose(electTUR)
decElect
decElect = decompose(elecTUR)
decElect
decElect = decompose(elecTUR)
decElect
plot(decElect)
elect = read.csv("http://www.ree.es/sites/default/files/01_ACTIVIDADES/Documentos/IRE/Brutos_Ene2018.csv", skip=3, dec=",", sep=“;”, nrows=109)
elect = read.csv("http://www.ree.es/sites/default/files/01_ACTIVIDADES/Documentos/IRE/Brutos_Ene2018.csv", skip=3, dec=",", sep=";", nrows=109)
elect
View(elect)
install.packages("forecast")
library(forecast)
plot(forecast(modeloHW, h=12))
modeloHW = HoltWinters(elect)
elect
elecTextil = ts(elect$INDUS_INT, start = c(2009, 1), frequency=12)
elecTextil
plot(elecTextil)
plot(forecast(HoltWinters(elecTextil)))
decTextil = decompose(elecTextil)
plot(decTextil)
plot(forecast(HoltWinters(elecTextil)))
plot(forecast(HoltWinters(elecTextil), h=24))
plot(forecast(HoltWinters(elecTextil), h=60))
plot(decTextil)
elecTextil = ts(elect$INDUS_CONS, start = c(2009, 1), frequency=12)
eleConst = ts(elect$INDUS_CONS, start = c(2009, 1), frequency=12)
plot(eleConst)
plot(forecast(HoltWinters(eleConst), h=12))
dataset = read.table("Datasets/Data.csv")
setwd("~/")
setwd("~/Users")
setwd("~/Users")
setwd("C:/")
setwd("C:/Users")
setwd("C:/Users/USUARIO/Desktop/clonaciones-github/Apuntes_AndaluciaLAB/Lenguaje_R")
dataset = read.table("Datasets/Data.csv")
View (dataset)
dataset = read.table("Datasets/Data.csv", header= T)
dataset = read.table("Datasets/Data.csv", header= T, sep=",")
function_name <- function(n) {
Function body
}
checkParImpar <- function(n) {
if (n % 2 == 0){
print("Es par")
}else{
print("Es impar")
}
}
checkParImpar(2)
checkParImpar <- function(n) {
if (n % 2 == 0){
print("Es par")
}else{
print("Es impar")
}
}
checkParImpar <- function(n) {
if (n % 2 == 0){
print("Es par")
}else{
print("Es impar")
}
}
checkParImpar <- function(n) {
if (n % 2 == 0){
print("Es par")
}else{
print("Es impar")
}
}
checkParImpar <- function(n) {
if (n % 2 == 0){
print("Es par")
}else{
print("Es impar")
}
}
checkParImpar <- function(n) {
if (n % 2 == 0){
print("Es par")
}else{
print("Es impar")
}
}
checkParImpar <- function(n){}
checkParImpar <- function(n) {
if (n % 2 == 0){
print("Es par")
}else{
print("Es impar")
}
}
pow <- function(x, y) {
# function to print x raised to the power y
result <- x^y
print(paste(x,"raised to the power", y, "is", result))
}
if(n%2 == 0){
}
checkParImpar(2)
checkParImpar(2)
checkParImpar(2)
checkParImpar(2)
checkParImpar(2)
checkParImpar(2)
checkParImpar(2)
checkParImpar(250)
checkParImpar(250)
checkParImpar <- function(n) {
if((n%%2) == 0){
return print("Es par")
}else{
return print("Es impar")
}
}
if((num %% 2) == 0) {
print(paste(num,"is Even"))
} else {
print(paste(num,"is Odd"))
}
if((num %% 2) == 0) {
print(paste(num,"is Even"))
} else {
print(paste(num,"is Odd"))
}
num = as.integer(readline(prompt="Enter a number: "))
num = as.integer(readline(prompt="Enter a number: "))
print(paste(num,"is Even"))
} else {
print(paste(num,"is Odd"))
}
num = as.integer(readline(prompt="Enter a number: "))
print(paste(num,"is Even"))
} else {
print(paste(num,"is Odd"))
}
num = as.integer(readline(prompt="Enter a number: "))
if((num %% 2) == 0) {
print(paste(num,"is Even"))
} else {
print(paste(num,"is Odd"))
}
if((n%%2) == 0){
return print("Es par")
}else{
return print("Es impar")
}
checkParImpar <- function(n) {
if((n%%2) == 0){
return print("Es par")
}else{
return print("Es impar")
}
}
checkParImpar(250)
checkParImpar <- function(n) {
if((n %% 2) == 0){}
if((n %% 2) == 0){
dzcçdsfklsadjf
fasklfjmaskldfm
prueba1 <- checkParImpar(250)
checkParImpar <- function(n) {
if((n%%2) == 0){
return print("Es par")
}else{
return print("Es impar")
}
}
checkParImpar <- function(n) {
if((n%%2) == 0){
return print("Es par")
}else{
return print("Es impar")
}
}
prueba1 <- checkParImpar(250)
print(prueba1)
f = function(x,y) {
x <- x +1
y <- y +1
return(x+y)
}
x <-20; y <- 30; z <- f(x,y); print(x): print(y)
f = function(x) {
x <- x
if((x %% 2) == 0){
return "Es par"
}
}
f = function(x) {
x <- x
if((x %% 2) == 0){
return "Es par"
}
}
print(ejercicio1(24))
ejercicio1 <- function(x){
if((x %% 2) == 0){
return "Es par"
}else{•
return "Es impar"
}
}
if((x %% 2) == 0){
return "Es par"
}else{
return "Es impar"
}
ejercicio1 <- function(x){
if(x %% 2 == 0{
return "Es par"
}else{
return "Es impar"
}
}
print(ejercicio1(24))
ejercicio1 <- function(x){
if(x %% 2 == 0{
return "Es par"
}else{
return "Es impar"
}
}
print(ejercicio1(24))
ejercicio1 <- function(x){
if(x %% 2 == 0{
return "Es par"
}else{
return "Es impar"
}
}
print(ejercicio1(24))
> x <-20; y <- 30; z <- f(x,y); print(x): print(y)
f = function(x,y) {
x <- x +1
y <- y +1
return(x+y)
}
x <-20; y <- 30; z <- f(x,y); print(x): print(y)
x <-20; z <- f(x); print(x)
f = function(x) {
print(x," es par")
}
x <-20; z <- f(x); print(x)
x <20; z <- f(x); print(x)
x <- 4
if(x%%2 == 0){
print("Es par")
}else{
print("Es impar")
}
x <- 458923
if(x%%2 == 0){
print("Es par")
}else{
print("Es impar")
}
source('~/.active-rstudio-document')
variable <- list(12, c(12,3,45))
if(is.numeric(variable)){
print("Es un número")
}else if(is.character(variable)){
print("Es un carácter")
}else{
print("No es ni un número ni un carácter")
}
variable <- "565"
if(is.numeric(variable)){
print("Es un número")
}else if(is.character(variable)){
print("Es un carácter")
}else{
print("No es ni un número ni un carácter")
}
variable <- 565
if(is.numeric(variable)){
print("Es un número")
}else if(is.character(variable)){
print("Es un carácter")
}else{
print("No es ni un número ni un carácter")
}
source('~/.active-rstudio-document', encoding = 'UTF-8')
vector <- c(18,10,30)
maximo <- 0
if((vector[1] > vector[2]) & vector[1] > vector[3]) ){
maximo <- vector[1]
}else if (vector[2] > vector[3]){
maximo <- vector[2]
}else{
maximo <- vector[3]
}
if( (vector[1] > vector[2]) & (vector[1] > vector[3]) ){
maximo <- vector[1]
}else if (vector[2] > vector[3]){
maximo <- vector[2]
}else{
maximo <- vector[3]
}
print(maximo)
source('~/.active-rstudio-document')
